ROS_DSO:
main.cpp:
ros::Subscriber imgSub = nh.subscribe("duo3d/right/image_rect", 16, &vidCb)
->
void vidCb(const sensor_msgs::ImageConstPtr img)
{...
fullSystem->addActiveFrame(undistImg, frameID);
->addActiveFrame
...}

DSO:
FullSystem.cpp:
void FullSystem::addActiveFrame( ImageAndExposure* image, int id )
{...
ow->publishCamPose(fh->shell, &Hcalib);
->publishCampose
...}

PangolinDSOViewer.cpp:
void PangolinDSOViewer::publishCamPose(FrameShell* frame,		CalibHessian* HCalib)
{...
allFramePoses.push_back(frame->camToWorld.translation().cast<float>());
->camToWorld.translation()
...}

camToWorld is defined in KeyFrameDisplay.h as below:
SE3 camToWorld;

in pose_sensor.h
void measurementCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr & msg);
msg type should be geometry_msgs::PoseWithCovarianceStamped

geometry_msgs::PoseWithCovarianceStamped
{
  Header header
  {
    uint32 seq
    time stamp
    string frame_id
  }
  PoseWithCovariance pose
  {
    Pose pose
    {
      Point position
      {
        float64 x
        float64 y
        float64 z
      }
      Quaternion orientation
      {
        float64 x
        float64 y
        float64 z
        float64 w
      }
    }
    float64[36] covariance
  }
}
